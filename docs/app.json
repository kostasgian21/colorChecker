[{"name":"app.R","content":"library(shiny)\r\nlibrary(hues)\r\nlibrary(ggplot2)\r\nlibrary(sortable)\r\nlibrary(gplots)\r\nlibrary(dichromat)\r\nlibrary(plotrix)\r\n\r\n# shinylive::export(appdir = \"C:/Users/kogi/Documents/repos/QRapps/colorChecker\", destdir = \"docs\")\r\n\r\n\r\ndesat <- function(cols, sat=0.5) {\r\n  X <- diag(c(1, sat, 1)) %*% rgb2hsv(col2rgb(cols))\r\n  hsv(X[1,], X[2,], X[3,])\r\n}\r\n\r\n# overload the swatch function from 'hues' library\r\nswatchKG <- function (x,y=x) \r\n{\r\n  if (length(x)<1) {\r\n    x=c('violet','purple','lightblue','grey40','brown','khaki1','orange','pink','blue','green','darkgreen','grey60','red','black','yellowgreen','gold','deeppink','orange3','greenyellow','cyan','yellow','white')\r\n    y=c('_intent','_unintent','inj_trans','_otherncd','msk','skin','diab_ckd','_subs','_mental','_neuro','digest','resp','cvd','_neo','nutrition','mater_neonat','_infect','_ntd','_enteric_all','_ri','_hiv_std','COVID-19')\r\n  }\r\n  barplot(rep(0.5, length(x)), col = rev(x), space = 0.01, axes = FALSE, \r\n          names.arg = rev(y), cex.names = 1.2, horiz = T, las = 1)\r\n  return(invisible(NULL))\r\n}\r\n\r\n# # colDistance among simulated colors\r\n# colDistance <- function (x,y,...) \r\n# {\r\n#   l <- list(...)\r\n#   if (l==\"normal\" || length(l)==0) {\r\n#     return(sum((col2rgb(x)-col2rgb(y))^2))\r\n#   }\r\n#   return(sum((col2rgb(dichromat::dichromat(x, type = l[[1]]))-col2rgb(dichromat::dichromat(y, type = l[[1]])))^2))\r\n# }\r\n\r\nrank_list_basic <- rank_list(\r\n  text = \"Swap colors\",\r\n  labels = as.list(scan(text = gsub(\" \",\",\",\"violet purple lightblue grey40 brown khaki1 orange pink blue green darkgreen grey60 red black yellowgreen gold deeppink orange3 greenyellow cyan yellow white\"), what = \"\", sep = \",\")),\r\n  input_id = \"rank_list_basic\",\r\n  options = sortable_options(swap = TRUE)\r\n)\r\n\r\n# Define UI for random distribution app ----\r\nui <- fluidPage(\r\n  \r\n  # App title ----\r\n  titlePanel(\"Check colour palettes\"),\r\n  \r\n  tabsetPanel(               \r\n    tabPanel(\"Play and swap\",\r\n             sidebarLayout(\r\n               sidebarPanel(\r\n                 rank_list_basic,width = 2\r\n               ),\r\n               mainPanel(\r\n                 plotOutput(\"plot3\"),width = 10\r\n               )\r\n             )\r\n    ),\r\n    tabPanel(\"Check colours\",\r\n             \r\n             # Sidebar layout with input and output definitions ----\r\n             sidebarLayout(\r\n               \r\n               sidebarPanel(\r\n                 textInput(\"fn\", label = \"Paste colour names or hex strings.\",value = \"red green black\"),\r\n                 \r\n                 helpText(\"Paste color names or color hex strings and separate them using commas or single spaces. You can use the paste(cols,collapse = \\\" \\\") command, where cols is a vecto rwith your colors.Eg, copy this: violet purple lightblue grey40 brown khaki1 orange pink blue green darkgreen grey60 red black yellowgreen gold deeppink orange3 greenyellow cyan yellow white\"),\r\n                 \r\n                 textInput(\"fn2\", label = \"Paste cause labels\",value = \"cvd _neuro _neo\"),\r\n                 \r\n                 helpText(\"Paste cause names and separate them using commas or single spaces. Do as with colours. Eg, copy this: _intent _unintent inj_trans _otherncd msk skin diab_ckd _subs _mental _neuro digest resp cvd _neo nutrition mater_neonat _infect _ntd _enteric_all _ri _hiv_std COVID-19\"),\r\n                 \r\n                 # Horizontal line ----\r\n                 \r\n                 \r\n                 sliderInput(\"walkers\",\r\n                             \"Saturation reduction:\",\r\n                             value = 1,\r\n                             min = 0.001,\r\n                             max = 1),\r\n                 helpText(\"Choose saturation reduction value.\"),\r\n                 \r\n                 # Horizontal line ----\r\n                 tags$hr(),\r\n                 \r\n                 \r\n                 ############\r\n                 \r\n                 \r\n                 \r\n               ),\r\n               \r\n               \r\n               \r\n               \r\n               \r\n               \r\n               # Main panel for displaying outputs ----\r\n               mainPanel(\r\n                 # Output: Tabset w/ plot, summary, and table ----\r\n                 plotOutput(\"plot2\"),\r\n                 verbatimTextOutput(\"colsNew\")\r\n               )\r\n               \r\n             )\r\n    )\r\n  )\r\n)\r\n\r\n\r\n\r\n\r\n# Define server logic for random distribution app ----\r\nserver <- function(input, output) {\r\n  \r\n  \r\n  output$plot2 <- renderPlot({\r\n    par(mfrow=c(1,4))\r\n    \r\n    cols=gsub(\" \",\",\",input$fn)\r\n    cols <- scan(text = cols, what = \"\", sep = \",\")\r\n    \r\n    pal <- col2hex(cols)\r\n    cols <- desat(pal, input$walkers)\r\n    \r\n    yy=gsub(\" \",\",\",input$fn2)\r\n    yy <- scan(text = yy, what = \"\", sep = \",\")\r\n    \r\n    if (length(yy) != length(cols) ) {\r\n      yy=cols\r\n    }\r\n    \r\n    \r\n    swatchKG(cols,yy)\r\n    swatchKG(dichromat(cols, type = \"protan\"),yy)\r\n    swatchKG(dichromat(cols, type = \"deutan\"),yy)\r\n    swatchKG(dichromat(cols, type = \"tritan\"),yy)\r\n  })\r\n  ########\r\n  \r\n  output$plot3 <- renderPlot({\r\n    par(mfrow=c(1,4))\r\n    cols=unlist(input$rank_list_basic)\r\n    cols=gsub(\" \",\",\",cols)\r\n    cols <- scan(text = cols, what = \"\", sep = \",\")\r\n    \r\n    pal <- col2hex(cols)\r\n    cols <- desat(pal, input$walkers)\r\n    \r\n    yy=gsub(\" \",\",\",\"_intent _unintent inj_trans _otherncd msk skin diab_ckd _subs _mental _neuro digest resp cvd _neo nutrition mater_neonat _infect _ntd _enteric_all _ri _hiv_std COVID-19\")\r\n    yy <- scan(text = yy, what = \"\", sep = \",\")\r\n    \r\n    if (length(yy) != length(cols) ) {\r\n      yy=cols\r\n    }\r\n    \r\n    \r\n    swatchKG(cols,yy)\r\n    swatchKG(dichromat(cols, type = \"protan\"),yy)\r\n    swatchKG(dichromat(cols, type = \"deutan\"),yy)\r\n    swatchKG(dichromat(cols, type = \"tritan\"),yy)\r\n  })\r\n  \r\n  output$colsNew <- renderPrint({ \r\n    cols=gsub(\" \",\",\",input$fn)\r\n    cols <- scan(text = cols, what = \"\", sep = \",\")\r\n    \r\n    pal <- col2hex(cols)\r\n    cols <- desat(pal, input$walkers)\r\n    \r\n    recols=sapply(cols, color.id)\r\n    recols=sapply(recols,\"[[\",1)\r\n    print(\"Here are the new, saturated colors\")\r\n    recols\r\n  })\r\n  \r\n  \r\n}\r\n\r\n# Create Shiny app ----\r\nshinyApp(ui, server)","type":"text"},{"name":"README.md","content":"# colorChecker","type":"text"}]
